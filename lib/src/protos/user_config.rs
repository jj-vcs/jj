// This file is @generated by prost-build.
/// SecureUserConfig adds cryptographic signatures to ensure that any user
/// configuration was generated by the current user.
/// See <https://github.com/jj-vcs/jj/issues/1595> for more details.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecureUserConfig {
    /// Serialized UserConfig. Don't just put it as a submessage here because
    /// protobuf serialization is not canonical.
    #[prost(bytes = "vec", tag = "1")]
    pub storage: ::prost::alloc::vec::Vec<u8>,
    /// This *probably* isn't necessary, but it doesn't hurt.
    #[prost(bytes = "vec", tag = "2")]
    pub salt: ::prost::alloc::vec::Vec<u8>,
    /// The same config can be potentially seen at multiple places on disk.
    /// In particular, this is true for WSL and non-WSL.
    #[prost(message, repeated, tag = "3")]
    pub signatures: ::prost::alloc::vec::Vec<Signature>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Signature {
    /// If I zip up a repository and send it to you, a valid signature is then
    /// known to all attackers. They can then send me a zip file including the
    /// same signature, and I would then have user configs enabled, despite the
    /// repo coming from someone else.
    /// We mitigate this risk by putting the path in as part of the signature.
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// sign(storage + salt + path)
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// This will later be used for managed configs in the future.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UserConfig {}
