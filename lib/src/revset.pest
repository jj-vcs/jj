// Copyright 2021 The Jujutsu Authors
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

identifier_part = @{ (ASCII_ALPHANUMERIC | "_" | "@" | "/")+ }
identifier = @{
  identifier_part ~ ("." | "-" | "+" ) ~ identifier
  | identifier_part
}
symbol = {
  identifier
  | literal_string
}
literal_string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
whitespace = _{ " " | "\t" | "\r" | "\n" | "\x0c" }

parents_op = { "-" }
children_op = { "+" }
compat_parents_op = { "^" }

dag_range_op = { "::" }
dag_range_pre_op = { "::" }
dag_range_post_op = { "::" }
// TODO: Drop support for these in 0.15+
legacy_dag_range_op = { ":" }
legacy_dag_range_pre_op = { ":" }
legacy_dag_range_post_op = { ":" }
range_op = { ".." }
range_pre_op = { ".." }
range_post_op = { ".." }
range_ops = _{ dag_range_op | legacy_dag_range_op | range_op }
range_pre_ops = _{ dag_range_pre_op | legacy_dag_range_pre_op | range_pre_op }
range_post_ops = _{ dag_range_post_op | legacy_dag_range_post_op | range_post_op }

negate_op = { "~" }
union_op = { "|" }
intersection_op = { "&" }
difference_op = { "~" }
compat_add_op = { "+" }
compat_sub_op = { "-" }
infix_op = _{ union_op | intersection_op | difference_op | compat_add_op | compat_sub_op }

function_name = @{ (ASCII_ALPHANUMERIC | "_")+ }
keyword_argument = { identifier ~ whitespace* ~ "=" ~ whitespace* ~ expression }
argument = _{ keyword_argument | expression }
function_arguments = {
  argument ~ (whitespace* ~ "," ~ whitespace* ~ argument)* ~ (whitespace* ~ ",")?
  | ""
}
formal_parameters = {
  identifier ~ (whitespace* ~ "," ~ whitespace* ~ identifier)* ~ (whitespace* ~ ",")?
  | ""
}

primary = {
  function_name ~ "(" ~ whitespace* ~ function_arguments ~ whitespace* ~ ")"
  | "(" ~ whitespace* ~ expression ~ whitespace* ~ ")"
  | symbol
}

neighbors_expression = _{ primary ~ (parents_op | children_op | compat_parents_op)* }

range_expression = _{
  neighbors_expression ~ range_ops ~ neighbors_expression
  | neighbors_expression ~ range_post_ops
  | range_pre_ops ~ neighbors_expression
  | neighbors_expression
}

expression = {
  (negate_op ~ whitespace*)* ~ range_expression
  ~ (whitespace* ~ infix_op ~ whitespace* ~ (negate_op ~ whitespace*)* ~ range_expression)*
}

program = _{ SOI ~ whitespace* ~ expression ~ whitespace* ~ EOI }

alias_declaration_part = _{
  function_name ~ "(" ~ whitespace* ~ formal_parameters ~ whitespace* ~ ")"
  | identifier
}
alias_declaration = _{
  SOI ~ alias_declaration_part ~ EOI
}
