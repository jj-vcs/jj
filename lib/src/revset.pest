// SPDX-FileCopyrightText: Â© 2020-2024 The Jujutsu Authors
// SPDX-License-Identifier: Apache-2.0

identifier_part = @{ (ASCII_ALPHANUMERIC | "_" | "/")+ }
identifier = @{
  identifier_part ~ ("." | "-" | "+" ) ~ identifier
  | identifier_part
}
symbol = {
  identifier
  | literal_string
}
literal_string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
whitespace = _{ " " | "\t" | "\r" | "\n" | "\x0c" }

at_op = { "@" }
pattern_kind_op = { ":" }

parents_op = { "-" }
children_op = { "+" }
compat_parents_op = { "^" }

dag_range_op = { "::" }
dag_range_pre_op = { "::" }
dag_range_post_op = { "::" }
dag_range_all_op = { "::" }
compat_dag_range_op = { ":" }
compat_dag_range_pre_op = { ":" }
compat_dag_range_post_op = { ":" }
range_op = { ".." }
range_pre_op = { ".." }
range_post_op = { ".." }
range_all_op = { ".." }
range_ops = _{ dag_range_op | compat_dag_range_op | range_op }
range_pre_ops = _{ dag_range_pre_op | compat_dag_range_pre_op | range_pre_op }
range_post_ops = _{ dag_range_post_op | compat_dag_range_post_op | range_post_op }
range_all_ops = _{ dag_range_all_op | range_all_op }

negate_op = { "~" }
union_op = { "|" }
intersection_op = { "&" }
difference_op = { "~" }
compat_add_op = { "+" }
compat_sub_op = { "-" }
infix_op = _{ union_op | intersection_op | difference_op | compat_add_op | compat_sub_op }

function_name = @{ (ASCII_ALPHANUMERIC | "_")+ }
keyword_argument = { identifier ~ whitespace* ~ "=" ~ whitespace* ~ expression }
argument = _{ keyword_argument | expression }
function_arguments = {
  argument ~ (whitespace* ~ "," ~ whitespace* ~ argument)* ~ (whitespace* ~ ",")?
  | ""
}
formal_parameters = {
  identifier ~ (whitespace* ~ "," ~ whitespace* ~ identifier)* ~ (whitespace* ~ ",")?
  | ""
}

// TODO: change rhs to literal_string to require quoting? #2101
string_pattern = { identifier ~ pattern_kind_op ~ symbol }

primary = {
  function_name ~ "(" ~ whitespace* ~ function_arguments ~ whitespace* ~ ")"
  | "(" ~ whitespace* ~ expression ~ whitespace* ~ ")"
  | string_pattern
  // "@" operator cannot be nested
  | symbol ~ at_op ~ symbol
  | symbol ~ at_op
  | symbol
  | at_op
}

neighbors_expression = _{ primary ~ (parents_op | children_op | compat_parents_op)* }

range_expression = _{
  neighbors_expression ~ range_ops ~ neighbors_expression
  | neighbors_expression ~ range_post_ops
  | range_pre_ops ~ neighbors_expression
  | neighbors_expression
  | range_all_ops
}

expression = {
  (negate_op ~ whitespace*)* ~ range_expression
  ~ (whitespace* ~ infix_op ~ whitespace* ~ (negate_op ~ whitespace*)* ~ range_expression)*
}

program = _{ SOI ~ whitespace* ~ expression ~ whitespace* ~ EOI }

alias_declaration_part = _{
  function_name ~ "(" ~ whitespace* ~ formal_parameters ~ whitespace* ~ ")"
  | identifier
}
alias_declaration = _{
  SOI ~ alias_declaration_part ~ EOI
}
